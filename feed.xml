<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vance Lucas</title>
  <subtitle>Thoughts and Ramblings of an Entrepreneur</subtitle>
  <id>http://www.vancelucas.com/blog</id>
  <link href="http://www.vancelucas.com/blog"/>
  <link href="http://www.vancelucas.com/feed.xml" rel="self"/>
  <updated>2014-07-03T03:52:00Z</updated>
  <author>
    <name>Vance Lucas</name>
  </author>
  <entry>
    <title>Titanium Proxy Objects With JavaScript Call and Apply</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/titanium-proxy-objects-with-javascript-call-and-apply/"/>
    <id>http://www.vancelucas.com/blog/titanium-proxy-objects-with-javascript-call-and-apply/</id>
    <published>2014-07-03T03:52:00Z</published>
    <updated>2014-07-03T10:36:24-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;Sometimes language and platform abstractions bite you. They can seem pretty
straightforward and &amp;ldquo;just like the real thing&amp;rdquo;, but sometimes they have odd
behaviors that don&amp;rsquo;t quite work the way you expect.&lt;/p&gt;

&lt;h2&gt;Dynamic Programming with .call() and .apply()&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt; functions are something you will use a lot if your
code involves a lot of dynamic arguments, such as building an array of
arguments that then need to be mapped to actual ordered function arguments in a
function or method call.&lt;/p&gt;

&lt;p&gt;Since Titanium runs native JavaScript with the V8 engine bundled in your app,
you will naturally find yourself attempting things like this:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But if you run that, and you will be presented with the head-scratching error:&lt;/p&gt;
&lt;pre class="highlight text"&gt;invalid method &amp;#39;execute:&amp;#39;
&lt;/pre&gt;
&lt;p&gt;Although the error is pretty confusing - you &lt;em&gt;know&lt;/em&gt; there is a method named
&lt;em&gt;execute&lt;/em&gt; on the &lt;code&gt;db&lt;/code&gt; object - there actually is a good explanation for this
behavior.&lt;/p&gt;

&lt;h2&gt;Titanium Proxy Objects&lt;/h2&gt;

&lt;p&gt;What intiutively seems to you like a normal JavaScript variable here - &lt;code&gt;db&lt;/code&gt; -
is actually a &lt;a href="http://www.appcelerator.com/blog/2012/02/what-is-a-titanium-proxy-object/"&gt;proxy
object&lt;/a&gt;
created and returned by Titanium with the &lt;code&gt;Ti.Database.open&lt;/code&gt; call. Titanium
also returns proxy objects for pretty much every other component that has a
native counterpart they are bridging over to behind the scenes. This black
magic is fundamental to how Titanium works internally.&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Although the main Titanium &lt;a href="http://www.appcelerator.com/blog/2012/02/what-is-a-titanium-proxy-object/"&gt;proxy
object
explanation&lt;/a&gt;
suggests creating a wrapper object for the method call, that&amp;rsquo;s actually not necessary
at all, and creates a lot of extra work, as well as many additional lines of code.&lt;/p&gt;

&lt;p&gt;The best solution is to use a bit of JavaScript meta programming and call the
&lt;code&gt;apply&lt;/code&gt; method directly from the &lt;code&gt;Function&lt;/code&gt; prototype:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is a nice one-liner that achieves the same end result, is much easier to
undertand, and does not require a wrapper object or another layer of
indirection to achieve.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>&lt;code&gt;module.exports&lt;/code&gt; All The Things!</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/module-exports-all-the-things/"/>
    <id>http://www.vancelucas.com/blog/module-exports-all-the-things/</id>
    <published>2014-06-05T04:38:00Z</published>
    <updated>2014-06-05T10:35:56-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;One thing I find myself doing a lot in javascript files for
&lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, or any other
&lt;a href="http://wiki.commonjs.org/wiki/CommonJS"&gt;CommonJS&lt;/a&gt;-based system is typing
&lt;code&gt;module.exports&lt;/code&gt; quite a lot, or creating these obnoxiously large and
repetitive &lt;code&gt;module.exports&lt;/code&gt; declarations at the bottom of my files.&lt;/p&gt;

&lt;p&gt;For example in a helper library for a
&lt;a href="http://www.appcelerator.com/titanium/"&gt;Titanium&lt;/a&gt; mobile project, I had the
following code snippet:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// ...
&lt;/span&gt;
&lt;span class="c1"&gt;// Platform detection helpers
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isiPhone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iphone&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isiPad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipad&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isiOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isiPhone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isiPad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ios&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isAndroid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;android&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// ... (lots of other functions) ...
&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;  &lt;span class="nl"&gt;isiOS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isiOS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;isiPhone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isiPhone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;isiPad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isiPad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;isAndroid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isAndroid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is a small sampling, but there were many, many other helpful functions in
that file. You can probably imagine the number or times I had to type out all
the variable names - &lt;em&gt;twice!&lt;/em&gt; That seems like such a waste of typing. The other
problem with this approach is that there is nothing visually signaling to me
what is going to be a part of the public API, and what is private and internal.
Everything is just a &lt;code&gt;var&lt;/code&gt;, and I have to recall what I want exposed when doing
the &lt;code&gt;module.exports&lt;/code&gt; call at the end.&lt;/p&gt;

&lt;p&gt;To avoid these issues, I could just prefix everything with &lt;code&gt;module.exports&lt;/code&gt;
directly, but that&amp;rsquo;s a lot of typing too - and doing that makes it cumbersome
to use a function in another place in the same module file.  Since there would
be no local variable assigned, I would have to type the full
&lt;code&gt;module.exports.functionName()&lt;/code&gt; every time to call another function within my
own module with this approach.&lt;/p&gt;

&lt;h2&gt;A Better Solution - Namespacing&lt;/h2&gt;

&lt;p&gt;The way I have come up with to solve this in my own code is to create a single
empty object literal at the top of the file named &lt;code&gt;ns&lt;/code&gt; (for &lt;em&gt;namespace&lt;/em&gt;). I
then create functions on the &lt;code&gt;ns&lt;/code&gt; object as I go, and export all the properties
on the &lt;code&gt;ns&lt;/code&gt; object at the end of the file.&lt;/p&gt;

&lt;p&gt;So in my original example, &lt;code&gt;var isiPhone = ...&lt;/code&gt; becomes &lt;code&gt;ns.isiPhone: ...&lt;/code&gt; -
shedding a few keystrokes &lt;em&gt;and&lt;/em&gt; gaining more clarity, because I know that
everything in the &lt;code&gt;ns&lt;/code&gt; object gets automatically exported at the end of the
file:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;// ...
&lt;/span&gt;
&lt;span class="c1"&gt;// Platform detection helpers
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiPhone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iphone&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiPad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipad&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiPhone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiPad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ios&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAndroid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;android&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// ...
&lt;/span&gt;
&lt;span class="c1"&gt;// Export all the things! *\(&amp;#39;o&amp;#39;)|
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You could argue that any saved keystrokes are negated with the &lt;code&gt;module.exports&lt;/code&gt;
loop at the bottom, but the real benefit is the added clarity - I now know that
&lt;code&gt;var osname&lt;/code&gt; is just a temporary placeholder for data, and will never be in the
public API, and that all the functions following it will be. I don&amp;rsquo;t have to
scroll to the bottom or go anywhere else - I know this immediately by looking
at them, and re-using the public functions in &lt;code&gt;ns.isiOS&lt;/code&gt; isn&amp;rsquo;t painful. Besides,
I copy and paste the for loop anyways :).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; You may wonder &amp;ldquo;why not just assign &lt;code&gt;module.exports&lt;/code&gt; to &lt;code&gt;ns&lt;/code&gt;, like
this: &lt;code&gt;module.exports = ns;&lt;/code&gt;?&amp;rdquo; The reason is that using the &lt;code&gt;hasOwnProperty&lt;/code&gt;
method ensures that only properties you have explicitly added get exported. In
this case, it may not make a difference since we&amp;rsquo;re using a bare object
literal, but it&amp;rsquo;s good practice to use, so I do. Feel free to save a few lines
of code with the assignment if you feel differently!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Future Anticipated Questions</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/future-anticipated-questions/"/>
    <id>http://www.vancelucas.com/blog/future-anticipated-questions/</id>
    <published>2014-05-30T19:48:00Z</published>
    <updated>2014-05-31T21:42:19-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;I was recently part of a project where, upon asking for content for the
requried &amp;ldquo;Frequently Asked Questions&amp;rdquo; page, I was invited to a meeting with the
objective of &amp;ldquo;brainstorming content for the F.A.Q. page&amp;rdquo;. It was painfully
ironic. How can we possibly list frequently asked questions when we haven&amp;rsquo;t
even launched yet and &lt;em&gt;no one has asked any questions&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The meeting (video conference call) started, and I decided to stay silent for a
little while to see how the call would play out. The project stakeholders begun
by going over the F.A.Q. sections on a bunch of other websites, and compiling a
short list of all the questions they would need to write answers for. The list
included things like &lt;em&gt;&amp;ldquo;How can I contact you&amp;rdquo;&lt;/em&gt;, and &lt;em&gt;&amp;ldquo;How can I reset my
password&amp;rdquo;&lt;/em&gt; - &lt;strong&gt;questions that will likely never be asked unless your UI/UX is
terrible&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;All Filler, No Meat&lt;/h2&gt;

&lt;p&gt;Almost all of the questions on the list were things that anyone who has used a
website in the past 10 years should have some idea how to do. People naturally
look for &amp;ldquo;Contact&amp;rdquo; links in common navigation areas, and generally know they
can find a password reset link on a login form.  &lt;strong&gt;Simply by following common
conventions, all of the &amp;ldquo;F.A.Q.&amp;quot;s gleaned from other websites become completely
irrelevant&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Cart Before The Horse&lt;/h2&gt;

&lt;p&gt;Of course, all of the filler-quality content of the questions aside, the obvious
problem here is that &lt;strong&gt;by trying to anticipate future questions ahead of time, we
are going to get things wrong&lt;/strong&gt;. And, perhaps even more importantly - &lt;strong&gt;we are
creating unnecessary work for ourselves before launch, when our time is most
valuable&lt;/strong&gt;. Right before launch is exactly the time when you shouldn&amp;rsquo;t be
spending time on non-critical items.&lt;/p&gt;

&lt;h2&gt;Do You Really Need This Now?&lt;/h2&gt;

&lt;p&gt;This is a good question to asking about everything in general, but especially
when creating content pages for a website that you &amp;quot;need&amp;rdquo; before launch. During
my client meeting, after going over the initial list of F.A.Qs compiled during
the initial brainstorm, I interjected, and explained (nicely) everything that I
wrote above as an objection to creating the F.A.Q. page before launch. The
bottom line is that we were effectively changing the definition of &amp;ldquo;F.A.Q.&amp;rdquo;
from &lt;em&gt;Frequently Asked Questions&lt;/em&gt; to &lt;em&gt;Future Anticipated Questions&lt;/em&gt; by trying
to create content for it before we even had any real questions from visitors or
customers.&lt;/p&gt;

&lt;p&gt;Ultimately, we decided to put off the F.A.Q. section until after the website
launch and after we got some real customer questions. It seems obvious that it
should have been this way from the beginning, but it&amp;rsquo;s very easy for your
clients to get overwhelmed with things they think they need. It&amp;rsquo;s your job as a
professional to help them reason through everything and remove barriers to
launch to give them the best chance for success.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pulling My Apps From The App Store: Lessons Learned</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/pulling-my-apps-from-the-app-store/"/>
    <id>http://www.vancelucas.com/blog/pulling-my-apps-from-the-app-store/</id>
    <published>2014-05-01T02:31:00Z</published>
    <updated>2014-05-31T10:53:45-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Pulling My Apps From The App Store" src="/images/posts/2014/appstore/itunesconnect-unpublished-apps.png" /&gt;&lt;/p&gt;

&lt;p&gt;Last night, I decided to pull my two iOS and Android apps &lt;a href="/blog/android-iphone-seo-app/"&gt;SEMTab SEO
Pro&lt;/a&gt; and my very first app, &lt;a href="/blog/zero-to-app-in-two-weeks-with-titanium/"&gt;AutoRidge
Lite&lt;/a&gt; from the App Store and
Google Play. It was a difficult decision to make, because they were my first
two apps, and I now have &lt;em&gt;no published mobile apps&lt;/em&gt; to show potential freelance
clients when they ask for app examples. This does limit my options, but now is
a great time to make this move since I just started a full-time long-term
contract and won&amp;rsquo;t be actively looking for extra work right now.&lt;/p&gt;

&lt;h2&gt;Showcasing Quality&lt;/h2&gt;

&lt;p&gt;With the &lt;a href="/blog/funemployed/"&gt;recent shutdown of my company&lt;/a&gt;, I feel like I&amp;rsquo;m
writing a new chapter in my life. Having any app in the app store just to say I
have one is no longer enough. The bar is higher now. &lt;strong&gt;I want a high-quality,
well-rated app that people genuinely like and want to use&lt;/strong&gt;. I want something I
can really be proud of. It doesn&amp;rsquo;t have to be complicated or difficult, or even
do anything fancy. It just has to look good, and do one thing well &amp;ndash; and &lt;em&gt;not
crash randomly&lt;/em&gt;. Difficult task, I know.&lt;/p&gt;

&lt;h2&gt;What A Bad App Looks Like&lt;/h2&gt;

&lt;p&gt;To provide an example of the kind of results a bad quality app will give you,
look no further than my own app - my only paid app - one I just pulled from the
stores - &lt;a href="http://semtab.com/"&gt;SEMTab SEO Pro&lt;/a&gt;. This app was ill-conceived and
hastily crafted. The UI wasn&amp;rsquo;t thought out very well, and neither was the
stability of the source data. The code I used to fetch Google&amp;rsquo;s PR ranking was
frequently wrong (I apparently used the wrong black magic incantation to summon
the accurate result), and link counts from Facebook and Twitter were
different than what were reported by other (more accurate) tools and by the
platforms themselves (turns out the API I used was way outdated).&lt;/p&gt;

&lt;h3&gt;Ratings&lt;/h3&gt;

&lt;p&gt;On Google Play, SEMTab had an abysmal rating of 1.6. This is primarily due to
the app crashing or just plain not working on a few Android devices that I
was not able to test on, or were not actually supported (like the &amp;ldquo;Rubbish&amp;rdquo;
review you see for it not working on the Galaxy Tab - one of the first Android
tablets that liked to pretend it could run normal Android apps just fine).&lt;/p&gt;

&lt;p&gt;&lt;img alt="Google Play Rating - An abysmal 1.6" src="/images/posts/2014/appstore/semtab-googleplay-ratings.png" /&gt;&lt;/p&gt;

&lt;p&gt;On the App Store, the app was a lot more stable, but still got a bad rating for
its terrible accuracy.&lt;/p&gt;

&lt;p&gt;&lt;img alt="App Store Rating - An not-much-beter 2 stars" src="/images/posts/2014/appstore/semtab-appstore-ratings.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Revenue&lt;/h3&gt;

&lt;p&gt;The app was $1.99, and was on sale for $0.99 for an extended period
of time to try and boost sales. Obviously, this strategy doesn&amp;rsquo;t work if your
app sucks and has a bunch of bad ratings.&lt;/p&gt;

&lt;p&gt;Google Play Revenue&lt;/p&gt;

&lt;p&gt;&lt;img alt="Google Play Revenue 2011-2014" src="/images/posts/2014/appstore/semtab-googleplay-revenue.png" /&gt;&lt;/p&gt;

&lt;p&gt;App Store Revenue&lt;/p&gt;

&lt;p&gt;&lt;img alt="iTunes Connect Stats 2011-2014" src="/images/posts/2014/appstore/itunesconnect-proceeds-2009-2014.png" /&gt;&lt;/p&gt;

&lt;p&gt;A whopping &lt;strong&gt;$127.19&lt;/strong&gt; from Google and &lt;strong&gt;$83.01&lt;/strong&gt; from Apple, for a grand total
of &lt;strong&gt;$210.20&lt;/strong&gt;. &lt;em&gt;In 4 years&lt;/em&gt;. Ouch. Totally not worth the (admittedly small)
effort I put into it.&lt;/p&gt;

&lt;h3&gt;Why I Pulled SEMTab SEO Pro&lt;/h3&gt;

&lt;p&gt;The reasons here are prety obvious, right? At this point, the ratings and
performance of this app are so bad that I don&amp;rsquo;t even &lt;em&gt;want&lt;/em&gt; it in my portfolio.
I didn&amp;rsquo;t even want people to know I made this app, and was a bit embarrased to
mention it whenever the &amp;ldquo;what apps have you made?&amp;rdquo; question came up, fearful
people would see the terrible rating read all the horrible reviews. Good
riddance. &lt;em&gt;(And if you&amp;rsquo;re wondering why I am publicly sharing all this now, it&amp;rsquo;s
for accountability - I never want to make an app this bad again.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;What a Mediocre App Looks Like&lt;/h2&gt;

&lt;p&gt;I am definitely &lt;em&gt;more proud&lt;/em&gt; (or, at least, not embarrased) by my first app -
&lt;a href="http://autoridge.com/mobile"&gt;Autoridge&lt;/a&gt;. I was a &lt;em&gt;lot&lt;/em&gt; more torn
about taking down Autoridge than I was about SEMTab. The reviews of Autoridge
basically boil down to this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The people who used the app and found relevant data for their vehicle&amp;rsquo;s
year/make/model &lt;strong&gt;loved it&lt;/strong&gt;. It provided huge value for them.&lt;/li&gt;
&lt;li&gt;The people who could not find their specific vehicle&amp;rsquo;s year/make/model, or
didn&amp;rsquo;t find any (or very few) relevant parts for their vehicle mostly
trashed it as incomplete, inaccurate or unreliable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Poor Early Titanium Android Support&lt;/h3&gt;

&lt;p&gt;And as in the case of SEMTab, there were also quite a few Android users that
the app didn&amp;rsquo;t work for at all (freezing or crashing). I mostly attribute this
to the very poor early &lt;a href="http://www.appcelerator.com/"&gt;Appcelerator Titanium&lt;/a&gt;
Android support. Both these apps were developed and released at least 3 years
ago on Titanium versions 1.5.x - 1.7.x, and a lot has changed for the better
since those dark ages with Titanium (we have have an MVC framework called
Alloy, and Titanium is at 3.2.x). From my experience with Alloy, I am positive
that updated versions of these apps would elimate all the problems on Android.&lt;/p&gt;

&lt;p&gt;That said, it&amp;rsquo;s pretty disharenting when you develop an Android app with an
intermediate platform like Titanium, test it locally with your own Android
device and emulator working perfectly, and then release it to a tsunami of
1-star reviews and reports of random freezes and crashes on various Android
devices that you can&amp;rsquo;t do anything to fix.&lt;/p&gt;

&lt;h3&gt;Ratings&lt;/h3&gt;

&lt;p&gt;On Google Play, Autoridge Lite had a &lt;strong&gt;very average rating of 3.1&lt;/strong&gt;. I am
actually suprised it was this high with the number of ratings reporting freezes
and crashes, but like I said, the number of people who it did work for
generally loved it. You can see this wide rating distribution reflected in the
data. This saddens me a bit, because the rating could have easily been 4+ in
Google Play if it worked consistently across all Android devices.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Google Play Rating - A very average 3.08" src="/images/posts/2014/appstore/autoridge-googleplay-ratings.png" /&gt;&lt;/p&gt;

&lt;p&gt;The App Store rating was pretty much the same story, with all the negative
reviews questioning data completeness and accuracy:&lt;/p&gt;

&lt;p&gt;&lt;img alt="App Store Rating - An not-much-beter 2 stars" src="/images/posts/2014/appstore/autoridge-appstore-ratings.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Distribution&lt;/h3&gt;

&lt;p&gt;The uptake of Autoridge Lite surprised me from the start. It definitely seems
like something people were ready to embrace if the data was more accurate,
complete, and up-to-date. I think overall, people really like the idea of using
an app instead of flipping through a greasy old parts book at the auto part
store.&lt;/p&gt;

&lt;p&gt;App Store Distribution Units&lt;/p&gt;

&lt;p&gt;&lt;img alt="App Store Units - 2009-2014" src="/images/posts/2014/appstore/itunesconnect-units-2009-2014.png" /&gt;&lt;/p&gt;

&lt;p&gt;Google Play Installs&lt;/p&gt;

&lt;p&gt;&lt;img alt="Google Play Distribution - 2010-2014" src="/images/posts/2014/appstore/autoridge-googleplay-units.png" /&gt;
&lt;img alt="Google Play Active Installs - 2010-2014" src="/images/posts/2014/appstore/autoridge-googleplay-activeinstalls.png" /&gt;&lt;/p&gt;

&lt;p&gt;According to Google, there are &lt;strong&gt;still 1,584 devices with Autoridge Lite
installed&lt;/strong&gt;. Definitely far better than SEMTab SEO Pro that had only
12 active installs. A lot of people still like this app.&lt;/p&gt;

&lt;h3&gt;Why I Pulled Autoridge Lite&lt;/h3&gt;

&lt;p&gt;The decision to pull Autoridge from the App Store and Google Play was much
harder than with SEMTab, but ultimately, it came down to an issue of time,
energy, and focus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Autoridge Lite has a &lt;a href="http://autoridge.com"&gt;webservice backend&lt;/a&gt; that I also
built and maintain, and this costs time and money.&lt;/li&gt;
&lt;li&gt;The vehicle data has a low degree of accuracy with no automatic error
correction, and would take a significant re-investment of time and energy to
correct. I would have to research new sources of auto part information and
build web scrapers/parsers for each of them, as well as implement better
processes for checking for updates and invalidating bad data.&lt;/li&gt;
&lt;li&gt;I want to completely re-code the app, and have wanted to for a while. So
doing this plus all the webservice updates too would probably take longer than
the original 2 weeks the entire project took initially. And since I can&amp;rsquo;t
update the app only without fixing the data accuracy issue, I have to
consider the whole picture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short - it would take too long to re-build the right way, and I don&amp;rsquo;t
currently see it as worth the effort considering I haven&amp;rsquo;t made any money from
it (and don&amp;rsquo;t see any path to make significant money from it ever as a one-man
show).&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Although this choice was tough, and arguably should have happened a long time
ago, I am happy to be doing it now. &lt;strong&gt;The first step towards finding something
that works is identifying and eliminating the stuff that doesn&amp;rsquo;t&lt;/strong&gt;. The worst
thing that can happen is to split your time, energy, and focus across so many
projects that you do them all badly. This is exactly what I feel I have done.
&lt;strong&gt;I want to be able to focus on my next project, I want it to be
high-quality, and I want it to have a clear revenue path&lt;/strong&gt;. This whole &amp;ldquo;making
money with software&amp;rdquo; path is not an easy one, so I want to give myself the best
chance possible by concentrating on the next big thing, and making a better
product than I&amp;rsquo;ve ever made before. That&amp;rsquo;s what this move is all about.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Funemployed</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/funemployed/"/>
    <id>http://www.vancelucas.com/blog/funemployed/</id>
    <published>2014-03-20T13:50:00Z</published>
    <updated>2014-04-30T21:30:45-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;After running &lt;a href="http://brightbit.com"&gt;Brightbit&lt;/a&gt; with &lt;a href="http://joshuaogle.com"&gt;Joshua
Ogle&lt;/a&gt; and &lt;a href="http://ericboehs.com"&gt;Eric Boehs&lt;/a&gt; for nearly
fours years, it officially came to an end a few weeks ago on February 28, 2014
when we closed the office. It&amp;rsquo;s a long story, and there is no blog post for it
yet, but now is not the time. Long story short, we worked too far past our
deposits for a few clients who used to be awesome clients, but, as it turns
out, couldn&amp;rsquo;t pay anymore. We ran out of money, had to lay everyone off, and
close the office. It was the most depressing experience of my life - but like I
said, that&amp;rsquo;s for another post some other time.&lt;/p&gt;

&lt;h2&gt;What do You do After Running Your Own Company?&lt;/h2&gt;

&lt;p&gt;This is a question I&amp;rsquo;ve been asking myself a lot over the past few months,
facing the impending office closure and winding down of my own business.
Thing is, when you&amp;rsquo;re a business owner, you get to (read: have to) wear a
lot of different hats. On any given day, I&amp;rsquo;d do development, marketing, sales,
project management, HR, project planning, business planning, financial
forcasting, and more. Since your role isn&amp;rsquo;t really defined, it just expands to
fill whatever role is necessary at any given time. It&amp;rsquo;s both frustrating and
liberating, and it&amp;rsquo;s an incredible learning experience - and unlike anything
else that any full-time job is going to give you. &lt;strong&gt;This makes choosing my next
job very hard&lt;/strong&gt;. A lot more thought goes into what I am going to go with the next
few years of my life, and how that will help me along my path, whether or not
it will be interesting and challenging enough for me, etc.&lt;/p&gt;

&lt;h2&gt;What I am Looking For Now&lt;/h2&gt;

&lt;p&gt;After taking a little breather to do some hard thinking and evaluate my
options, I have come to the conclusion that&amp;hellip; I have no idea what I really
want to do next. I am open to - and actively evaluating - a lot of different
options right now ranging from &lt;strong&gt;part-time and full-time contracts&lt;/strong&gt; to more
traditional (and even some quite unique) &lt;strong&gt;full-time jobs&lt;/strong&gt;. One thing I do know,
however, is that it does &lt;strong&gt;have to be something that is both very interesting
and challenging&lt;/strong&gt; for me - something that will force me to grow and learn. It
also has to be either &lt;strong&gt;remote/telecommute or based in the OKC area&lt;/strong&gt;. I have put
down significant roots in OKC, am very involved in the local developer
community, and have lots of family here. Basically, I really don&amp;rsquo;t want to move
right now &lt;em&gt;(unless maybe you need me to relocate to say&amp;hellip; the Bahamas or the
 Virgin Islands and pay generous housing allowances. There&amp;rsquo;s a chance I might
 go for that.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have work for me? &lt;a href="/contact"&gt;Get in touch&lt;/a&gt;. No recruiters, please!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I have accepted and started a full-time 12-month contract, so I am
no longer looking for work. Thanks for all the support and emails!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MacBook Pro Retina 3.5mm TRRS Cable With Audio Input</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/macbook-pro-retina-3-5mm-trrs-cable-with-audio-input/"/>
    <id>http://www.vancelucas.com/blog/macbook-pro-retina-3-5mm-trrs-cable-with-audio-input/</id>
    <published>2014-03-08T23:10:00Z</published>
    <updated>2014-03-09T14:35:06-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;One of the unexpected surprises that came with upgrading to a new Macbook Pro
Retina 15&amp;quot; from an older MacBook Pro was Apple&amp;rsquo;s inexplicable deletion of
the audio input (mic) 3.5mm jack. I use a regularly use a gaming headset with a
boom mic that was now rendered completely useless, because I was no longer able
to plug in the mic. I love it that Apple&amp;rsquo;s hardware is on the cutting edge, but
sometimes they do things like this that just don&amp;rsquo;t make sense for the average
user.&lt;/p&gt;

&lt;h2&gt;What Happened?&lt;/h2&gt;

&lt;p&gt;I did some searching around, and discovered that &lt;strong&gt;Apple changed the standard
dual input/output 3.5mm jacks for a single combined TRRS 3.5mm jack&lt;/strong&gt; with 3
contacts - the same one they use for the iPod, iPhone, and iPad. I guess it
makes sense for Apple to standardize everything so you can use their headphones
everywhere, but it caught me offguard and really frustrated me that I would
have to buy something extra just to continue using my headset.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Where did the mic jack go!?" src="http://f.cl.ly/items/241l0R3G2T3B153Z2o2v/Screen%20Shot%202014-03-08%20at%205.36.24%20PM.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Things I Tried&lt;/h2&gt;

&lt;p&gt;I did some searching and originally purchased &lt;a
href="http://www.amazon.com/gp/product/B002SK66OY?ie=UTF8&amp;camp=213733&amp;creative=393177&amp;creativeASIN=B002SK66OY&amp;linkCode=shr&amp;tag=auto0be-20"&gt;this
Headset Buddy cable from Amazon&lt;/a&gt;. It&amp;rsquo;s $15.95(!) and has branding from the
1980&amp;rsquo;s. I cringed and made the purchase thinking it would be worth it if it
solved my problem. When it arrived, it was clear that the price of the cable is
about 3x what it should be. The cable is flimsy and cheap, and didn&amp;rsquo;t even work
at all. I promptly returned it. &lt;strong&gt;The customer reviews are mixed, but don&amp;rsquo;t gamble
on it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That cable purchase has soured my view on the TRRS splitters for a while, so I
opted for a &lt;a
href="http://www.amazon.com/gp/product/B001MSS6CS?ie=UTF8&amp;camp=213733&amp;creative=393185&amp;creativeASIN=B001MSS6CS&amp;linkCode=shr&amp;tag=auto0be-20"&gt;USB
audio adapter to 3.5mm input/output jacks&lt;/a&gt; instead. &lt;strong&gt;It was a little cheaper
at $10.95 and worked great, but came with a huge downside&lt;/strong&gt;: It uses one of
only TWO total USB ports on your MacBook Pro - a precious resource that I was
already using (and thus had to also use a USB hub). Another downside here is
that you have to explicitly switch to USB audio using the Sound preference
pane, which can be annoying at times.&lt;/p&gt;

&lt;h2&gt;The Best Solution&lt;/h2&gt;

&lt;p&gt;The best working solution (and also the cheapest) I found is &lt;strong&gt;&lt;a
href="http://www.monoprice.com/Product?c_id=115&amp;cp_id=11509&amp;cs_id=1150908&amp;p_id=601030&amp;seq=1&amp;format=2"&gt;this
TRRS audio cable from Monoprice&lt;/a&gt;
for about $5&lt;/strong&gt;. When it came in the mail, I originally thought I ordered the
wrong cable, because the configuration is weird. Instead of a typical &amp;ldquo;Y&amp;rdquo;
configuration off the male jack, it instead splits off from the 3.5mm audio
input female jack into another 3.5mm audio output female jack. Make sure you
look at all the product images to see what I mean.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Weird Cable Configuration" src="http://images.monoprice.com/productlargeimages/6010302.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;The cable works well and feels very durable, even if it does looke like the
wrong type of cable (Monoprice, if you&amp;rsquo;re listening - please fix this. It
works, but it just looks weird with the &amp;ldquo;Y&amp;rdquo; coming off the female 3.5mm
input jack).&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully my misadventures in trying to solve this problem that Apple itself
doesn&amp;rsquo;t even have a cable for will help you not have to do all this
experimentation yourself. I feel like this should have been way easier than it
was to find a cable that works on newer Macbook Pros, but apparently marketing
lags a bit behind for 3rd party accessories like this (all these cables are
marketed as iPod/iPhone/iPad cables, which have the same TRRS 3.5mm jack). In
another year or two, I doubt this will be a problem at all, but just incase it
still is - you can always find this blog post :).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Oklahoma PHP User Group Reboot</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/okcphp-user-group-reboot/"/>
    <id>http://www.vancelucas.com/blog/okcphp-user-group-reboot/</id>
    <published>2014-03-03T17:26:00Z</published>
    <updated>2014-03-03T13:33:31-06:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;Our first &lt;a href="http://oklahomaphp.com"&gt;Oklahoma PHP User Group&lt;/a&gt; meeting in a few
years happened on Thursday, February 20th 2014, thanks to the efforts of &lt;a href="http://jakeasmith.com"&gt;Jake
A. Smith&lt;/a&gt; who contacted me about it (as I ran the
previous PHPUG a few years ago) and did all the legwork to make it happen. We
are now going to co-organize the user group going forward.&lt;/p&gt;

&lt;p&gt;After a meet &amp;amp; greet fueled by pizza and soda, I presented a short
introductory talk on &lt;a href="https://getcomposer.org"&gt;Composer&lt;/a&gt;, which also covered
using and publishing packages to &lt;a href="https://packagist.org"&gt;Packagist&lt;/a&gt;. The
turnout was fairly small - around 12 people or so, but everyone was excited
that the user group was happening, and there were lots of beginners and new
faces.&lt;/p&gt;

&lt;p&gt;Our meetings are going to be on the &lt;strong&gt;3rd Thursday of each month&lt;/strong&gt;. All our
meeting times, descriptions, etc. will be posted on our &lt;a href="http://www.meetup.com/OklahomaPHP"&gt;Meetup
Page&lt;/a&gt;. Our March plans are tentative, but we
plan to do a PHP Foundations talk that will cover all the basics like
Namespaces, &lt;a href="http://www.php-fig.org/"&gt;PHP-FIG&lt;/a&gt; standards, code organization,
etc. so it should be a great meeting for begineers and those who are not
familiar with what the larger PHP community is doing. You can RSVP on the
Meetup page to get notifications and reminder emails for upcoming meetings.
Hope to see you there!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Dokku to Deploy PHP Applications with a "git push" on DigitalOcean</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/using-dokku-to-deploy-php-applications-on-digitalocean/"/>
    <id>http://www.vancelucas.com/blog/using-dokku-to-deploy-php-applications-on-digitalocean/</id>
    <published>2014-02-08T19:48:00Z</published>
    <updated>2014-02-10T10:22:38-06:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;Want a Platform-as-a-Service setup like &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt; on your own
&lt;a href="https://www.digitalocean.com/?refcode=b814bf3a4035"&gt;$5/month VPS from DigitalOcean&lt;/a&gt;? Look no
further than
&lt;a href="http://progrium.com/blog/2013/06/19/dokku-the-smallest-paas-implementation-youve-ever-seen/"&gt;Dokku&lt;/a&gt;
- a set of scripts built on &lt;a href="https://www.docker.io/"&gt;Docker&lt;/a&gt; and Heroku&amp;rsquo;s own
buildpacks. After this setup, you&amp;rsquo;re just one &lt;code&gt;git push&lt;/code&gt; away from deploying
your app to your own server.&lt;/p&gt;

&lt;h2&gt;Step 1: Create a new Droplet with Dokku&lt;/h2&gt;

&lt;p&gt;DigitalOcean has a great guide on &lt;a href="https://www.digitalocean.com/community/articles/how-to-use-the-digitalocean-dokku-application?refcode=b814bf3a4035"&gt;how to use the DigitalOcean Dokku
Application&lt;/a&gt;,
so there is no sense in repeating the steps here. Follow the steps in that
article, and then come back here. &lt;strong&gt;There are issues I ran into after the Dokku
setup that are important steps not to skip&lt;/strong&gt;. So be sure to come back here
before trying to deploy your PHP application.&lt;/p&gt;

&lt;h2&gt;Step 2: Setup Swap Space&lt;/h2&gt;

&lt;p&gt;DigitalOcean boxes don&amp;rsquo;t come with any disk swap space configured by default,
but Dokku uses some when deploying your apps, so you need to &lt;a href="https://www.digitalocean.com/community/articles/how-to-add-swap-on-ubuntu-12-04?refcode=b814bf3a4035"&gt;configure some
using this
guide&lt;/a&gt;
before your first &lt;code&gt;git push&lt;/code&gt; or you may run into errors (I sure did). The guide
says Ubuntu 12.04, but it works on 13.04 too, so no worries. Do this and then come back. I&amp;rsquo;ll wait.&lt;/p&gt;

&lt;h2&gt;Step 3: Deploy Your App&lt;/h2&gt;

&lt;p&gt;Although the setup is not fully complete, try and deploy your app now to make
sure your dokku setup is working properly. You also need to deploy your app now
so you will have a container ready for the next steps.&lt;/p&gt;
&lt;pre class="highlight text"&gt;git remote add dokku dokku@yourdomain.com:app_name
git push dokku master
&lt;/pre&gt;
&lt;p&gt;The ouput of the &lt;code&gt;git push&lt;/code&gt; will let you know if your deploy was successful or
not. If you have a successful deploy, but get a &amp;ldquo;502 Bad Gateway&amp;rdquo; response from
Nginx, continue with the steps below.&lt;/p&gt;

&lt;h2&gt;Step 4: Install the user-env-compile Plugin&lt;/h2&gt;

&lt;p&gt;Install the &lt;a href="https://github.com/musicglue/dokku-user-env-compile"&gt;user-env-compile
plugin&lt;/a&gt;. This will allow
you to set environment variables on your app that are available to be used at
build time. &lt;strong&gt;This is important for the next step&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Step 5: Use CHH&amp;rsquo;s PHP Buildpack&lt;/h2&gt;

&lt;p&gt;Now that you have the &lt;code&gt;user-env-compile&lt;/code&gt; plugin installed and have created your
app&amp;rsquo;s initial container, you can set environment variable configuration values
on it. To specify what buildpack you want to use, set the &lt;code&gt;BUILDPACK_URL&lt;/code&gt; ENV value.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;ssh dokku@&amp;lt;yourserver.com&amp;gt; config:set &amp;lt;app_name&amp;gt; &lt;span class="nv"&gt;BUILDPACK_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://github.com/CHH/heroku-buildpack-php
&lt;/pre&gt;
&lt;p&gt;You should see output like this:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;-----&amp;gt; &lt;/span&gt;Setting config vars and restarting &amp;lt;app_name&amp;gt;
BUILDPACK_URL: https://github.com/CHH/heroku-buildpack-php
&lt;span class="gp"&gt;-----&amp;gt; &lt;/span&gt;Releasing &amp;lt;app_name&amp;gt; ...
&lt;span class="gp"&gt;-----&amp;gt; &lt;/span&gt;Release &lt;span class="nb"&gt;complete&lt;/span&gt;!
&lt;span class="gp"&gt;-----&amp;gt; &lt;/span&gt;Deploying &amp;lt;app_name&amp;gt; ...
&lt;span class="gp"&gt;-----&amp;gt; &lt;/span&gt;Deploy &lt;span class="nb"&gt;complete&lt;/span&gt;!
&lt;/pre&gt;
&lt;p&gt;NOTE: ANY Heroku buildpack will work, so if you wnat to use another one, you
are free to do so, although it is very doubtful you will find a better one for
PHP :).&lt;/p&gt;

&lt;h2&gt;Step 6: Set your Document Root&lt;/h2&gt;

&lt;p&gt;Now open your &lt;code&gt;composer.json&lt;/code&gt; file, and add the &lt;code&gt;extra&lt;/code&gt; configuration block to
specify your &lt;code&gt;document-root&lt;/code&gt; and &lt;code&gt;index-document&lt;/code&gt; so the PHP buildpack will
know where to serve your files from.&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;require&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;=5.4.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vlucas/bulletphp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~1.3.x&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;heroku&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;document-root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index-document&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.php&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Note: The &lt;code&gt;framework&lt;/code&gt; key here is &lt;code&gt;slim&lt;/code&gt;. This doesn&amp;rsquo;t match &lt;a href="http://bulletphp.com"&gt;my framework
Bullet&lt;/a&gt;, but I have to put this in here because this maps
to the &lt;a href="https://github.com/CHH/heroku-buildpack-php/tree/master/conf/nginx"&gt;nginx config file
used&lt;/a&gt;. So
if I don&amp;rsquo;t specify this here, the buildpack assumes a standard classic PHP
setup and will only execute &lt;code&gt;.php&lt;/code&gt; files, and not rewrite all requests to the
main &lt;code&gt;index.php&lt;/code&gt; file like most frameworks (including Bullet) require, causing
nginx to throw lots of &amp;ldquo;404 error&amp;rdquo; responses.&lt;/p&gt;

&lt;p&gt;The configuration key says &lt;code&gt;heroku&lt;/code&gt;, but this works for dokku too - remember
Dokku basically uses all the same basic things that Heroku does - buildpacks,
git based deploys, putting apps in their own sandboxed containers, etc.&lt;/p&gt;

&lt;h2&gt;Step 7: Install Other Plugins Your App Needs&lt;/h2&gt;

&lt;h3&gt;Custom Domains&lt;/h3&gt;

&lt;p&gt;You will want the &lt;a href="https://github.com/wmluke/dokku-domains-plugin"&gt;dokku domains
plugin&lt;/a&gt; so your app can use
domains instead of subdomains or ports.&lt;/p&gt;

&lt;p&gt;Then add your domain to your your app using:&lt;/p&gt;
&lt;pre class="highlight text"&gt;ssh dokku@&amp;lt;yourserver.com&amp;gt; domains:set &amp;lt;app_name&amp;gt; yourdomain.com api.yourdomain.com
&lt;/pre&gt;
&lt;h3&gt;MySQL / MariaDB&lt;/h3&gt;

&lt;p&gt;If your app uses MySQL, install the &lt;a href="https://github.com/Kloadut/dokku-md-plugin"&gt;dokku MariaDB
plugin&lt;/a&gt; (drop-in MySQL
Replacement).&lt;/p&gt;

&lt;p&gt;Then create a database for your app using:&lt;/p&gt;
&lt;pre class="highlight text"&gt;ssh dokku@&amp;lt;yourserver.com&amp;gt; mariadb:create &amp;lt;app_name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This will create a &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable that will be available
as a DSN string for your app to use to connect to the database via PDO or other
ORM that you may want to use. You can access this in PHP via &lt;code&gt;$_SERVER[&amp;#39;DATABASE_URL&amp;#39;]&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Other Plugins&lt;/h3&gt;

&lt;p&gt;If you use Redis, Memcached, or anything else, check the &lt;a href="https://github.com/progrium/dokku/wiki/Plugins"&gt;Dokku Plugins
page&lt;/a&gt; and install whatever you
need.&lt;/p&gt;

&lt;h2&gt;Step 8: Re-Deploy Your App&lt;/h2&gt;

&lt;p&gt;This time when you deploy your app via &lt;code&gt;git push&lt;/code&gt;, it will use the custom buildpack you set in
Step 4. You should be able to view your app live on your custom port, subdomain, or
domain now, and all should be well.&lt;/p&gt;

&lt;p&gt;Now sit back, relax, and enjoy your own mini-Heroku at a fraction of the cost!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SkiPHP Conference 2014</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/skiphp-conference/"/>
    <id>http://www.vancelucas.com/blog/skiphp-conference/</id>
    <published>2014-01-22T17:07:00Z</published>
    <updated>2014-05-01T18:18:23-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;It&amp;rsquo;s always fun to be a part of a conference&amp;rsquo;s first year. This year, I was
lucky enough to speak at the inaugural &lt;a href="http://skiphp.com"&gt;SkiPHP Conference&lt;/a&gt;
in Salt Lake City, UT. Since the conference was very micro-framework friendly,
I was able to present my own &lt;a href="http://bulletphp.com"&gt;Bullet PHP
Micro-Framework&lt;/a&gt;. The talk went well, was very well
recieved, and got &lt;a href="http://joind.in/talk/view/10434"&gt;very highly rated on
Joind.in&lt;/a&gt;. The talk (and Bullet itself)
presents some interesting ideas that I was very happy to be able to share in a
conference talk format.&lt;/p&gt;

&lt;p&gt;Overall, the conference was great. It was very well put together, and very well
run. The orgainzers sent lots of emails ahead of time letting us know what was
going on, and took care of speakers very well - even having breakfast ready for
us each morning in the speaker lounge (something that was very much appreciated
by myself and many other speakers as well). I thought the talk selection was
good as well - there were more sessions at this conference that I was
personally interested in atending than I have in while at many other
conferences over the years.&lt;/p&gt;

&lt;p&gt;Huge thanks and kudos go to the SkiPHP organizers - I hope this is a sign of
good things from the Salt Lake City PHP community, and I hope there are many
more sucessful years of this conference ahead.&lt;/p&gt;

&lt;h2&gt;Bullet: The Functional PHP Micro-Framework&lt;/h2&gt;

&lt;p&gt;My &lt;a href="https://www.slideshare.net/vlucas/bullet-php"&gt;presentation slides are avaialble on
Slideshare&lt;/a&gt;, though I am not sure
how enlightening they will be without the audio. For this particular talk of
mine, the audio context is pretty important. Luckily, my entire talk was
recorded on video, so I will post that here when available.&lt;/p&gt;

&lt;h2&gt;Post-Conference Activities&lt;/h2&gt;

&lt;p&gt;Half the fun of a conference is all the activities surrounding it, and all the
people you meet and talk to who are also there. At SkiPHP, the main event was
obvious - skiing! A small group of us stayed an extra day or two after the
conference to hit the slopes at &lt;a href="http://www.snowbird.com/"&gt;Snowbird&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="SkiPHP Slopes Crew" src="/images/posts/2014/skiphp/skiphp-group.jpg" /&gt;
&lt;small&gt;Pictured (Front): Adam Culp, Ben Edmonds, Chris Boden, Josh Adell
(Back) Paul Jones, Vance Lucas, John Coggeshall&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Paul Jones and I started with the beginner course and stayed on the &amp;ldquo;Chickadee&amp;rdquo;
hill since it was our first time snow skiing, but the other guys hit the real
slopes, and have much better, more majestic mountanside pictures and views to
share. I did manage to take a good selfie on the ski lift though!&lt;/p&gt;

&lt;p&gt;&lt;img alt="Vance Lucas on the Ski Lift on the Chickadee Slope at Snowbrid" src="/images/posts/2014/skiphp/skiphp-selfie.jpg" /&gt;&lt;/p&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;All in all, my time at SkiPHP was a blast. The Salt Lake City PHP community
really came together to put on a great conference and show their support for
events like this in their backyard. I am already looking forward to submitting
again next year! Maybe I can try some green slopes this time :).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>New Year, New Blog</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/new-year-new-blog/"/>
    <id>http://www.vancelucas.com/blog/new-year-new-blog/</id>
    <published>2014-01-04T04:57:00Z</published>
    <updated>2014-01-03T23:39:57-06:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;It&amp;rsquo;s a whole new year, and I&amp;rsquo;ve got a whole new blog. This time around, I knew
I wanted a static blog generator instead of a WordPress site (they are a little
more developer friendly, and there are no security vulnerabilities with static
HTML), and I&amp;rsquo;ve been window shopping a bit. A self-hosted blog was important to
me since I want to make sure I will always own and control all my own content.&lt;/p&gt;

&lt;h3&gt;The Options&lt;/h3&gt;

&lt;p&gt;Though popular, &lt;a href="https://github.com/imathis/octopress"&gt;Octopress&lt;/a&gt; was out,
because of my experience using it on &lt;a href="http://okcjs.com"&gt;OKC.js&lt;/a&gt;. It is
difficult to customize, and the Octopress code is mixed in with your blog and
website content, making upgrading difficult as well.&lt;/p&gt;

&lt;p&gt;Using &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; was very tempting - and I almost used it,
but I decided to take a look at another option first - and I&amp;rsquo;m very glad I did.&lt;/p&gt;

&lt;h3&gt;Enter Middleman&lt;/h3&gt;

&lt;p&gt;I ended up going with &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt; for this blog. We
just re-launched the &lt;a href="http://brightbit.com"&gt;Brightbit&lt;/a&gt; website with it, and
Joshua (my design co-founder) was raving about it, so I had to give it a shot.
Both Jekyll and Octopress use &lt;a href="http://liquidmarkup.org/"&gt;Liquid&lt;/a&gt; templates,
which are a learning curve if you&amp;rsquo;ve never used them. I personally don&amp;rsquo;t like
the syntax, so I wasn&amp;rsquo;t too keen on doing a lot of layout customization with
it.&lt;/p&gt;

&lt;p&gt;Middleman, however, is different. Middleman offers so much more flexibility -
pure Ruby code, Sass, the option to use Slim or Haml for templates, blog posts,
and pages, and the same asset pipeline that Rails has for combining and
compressing your CSS and JavaScript into a single file for production
deployment. Layout customization is also easier and better feeling in general.
The last, and perhaps biggest reason Middleman is a winner is that Middleman
exists entirely inside it&amp;rsquo;s own self-contained gem. Your site&amp;rsquo;s project folder
has only what it should - your site&amp;rsquo;s content. There is no Middleman cruft in
there that you have to bring along, and upgrades are clean and brainless since
Middleman is a gem.&lt;/p&gt;

&lt;h3&gt;Wrapping Up&lt;/h3&gt;

&lt;p&gt;Importing all my old posts from WordPress and converting them all to markdown
was a bit tricky and time-consuming (though
&lt;a href="https://github.com/mdb/wp2middleman"&gt;wp2middleman&lt;/a&gt; did most of the heavy
lifting), but I&amp;rsquo;m glad I did it. Here&amp;rsquo;s to a great 2014 on a great new (and
much better looking) blog.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Valitron: The Simple Validation Library That Doesn't Suck</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/valitron-the-simple-validation-library-that-doesnt-suck/"/>
    <id>http://www.vancelucas.com/blog/valitron-the-simple-validation-library-that-doesnt-suck/</id>
    <published>2013-03-04T00:00:00Z</published>
    <updated>2014-05-31T21:30:15-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/vlucas/valitron"&gt;Valitron&lt;/a&gt; is a simple, minimal and elegant stand-alone PHP validation library with NO dependencies. Valitron uses simple, straightforward validation methods with a focus on readable and concise syntax.&lt;/p&gt;

&lt;h3&gt;Why Another Validation Library?&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/vlucas/valitron"&gt;Valitron&lt;/a&gt; was created out of frustration with other validation libraries that have dependencies on large components from other frameworks unrelated to validation like
&lt;a href="https://github.com/illuminate/validation"&gt;Illuminate Validation&lt;/a&gt; (laravel 4) requiring 
&lt;a href="http://symfony.com/doc/master/components/http_foundation/index.html"&gt;Symfony HttpFoundation&lt;/a&gt;, pulling in a ton of extra files that aren&amp;rsquo;t needed for basic validation. It also has purposefully simple syntax used to run all validations in one call instead of individually validating each value by instantiating new classes and validating values one at a time like
&lt;a href="https://github.com/Respect/Validation"&gt;Respect Validation&lt;/a&gt; requires you to do. Valitron also has a focus on being concise - validation rules are just a single line per rule, and can include multiple fields in an array. This is handy, because in most use cases, a single validation rule - like &amp;ldquo;required&amp;rdquo; will be applied to many fields, so it doesn&amp;rsquo;t make sense to start with the field first like
&lt;a href="https://github.com/fuelphp/validation"&gt;Fuel Validation&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;In short, Valitron is everything you&amp;rsquo;ve been looking for in a validation library but haven&amp;rsquo;t been able to find until now: simple pragmatic syntax, lightweight code that makes sense, extensibility for custom callbacks and validations, good test coverage, and no dependencies.&lt;/p&gt;

&lt;h3&gt;Usage Example&lt;/h3&gt;

&lt;p&gt;Valitron is made to setup all your validation rules on the fields you need, and then run all the validations in one call. This is better than validating the fields one-by-one, because that approach causes a lot of &amp;ldquo;if&amp;rdquo; statements and branching logic that doesn&amp;rsquo;t make the resulting code any better than doing the validations by hand (which obviously sucks).&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Valitron\Validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Input array
&lt;/span&gt;&lt;span class="nv"&gt;$v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;required&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date_start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nv"&gt;$v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Email uses filter_var
&lt;/span&gt;&lt;span class="nv"&gt;$v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateAfter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date_start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;\DateTime&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// After today
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Yay! We&amp;#39;re all good!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Errors
&lt;/span&gt;    &lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;More usage examples and documentation can be found on the
&lt;a href="https://github.com/vlucas/valitron"&gt;Valitron GitHub Page&lt;/a&gt;. Valitron is
&lt;a href="https://packagist.org/packages/vlucas/valitron"&gt;on Packagist&lt;/a&gt;, and can be installed via
&lt;a href="http://getcomposer.org/"&gt;Composer&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
