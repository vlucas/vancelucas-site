<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vance Lucas</title>
  <subtitle>Thoughts and Ramblings of an Entrepreneur</subtitle>
  <id>http://www.vancelucas.com/blog</id>
  <link href="http://www.vancelucas.com/blog"/>
  <link href="http://www.vancelucas.com/feed.xml" rel="self"/>
  <updated>2015-04-17T21:25:00Z</updated>
  <author>
    <name>Vance Lucas</name>
  </author>
  <entry>
    <title>Year of Making Stuff</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/year-of-making-stuff/"/>
    <id>http://www.vancelucas.com/blog/year-of-making-stuff/</id>
    <published>2015-04-17T21:25:00Z</published>
    <updated>2015-04-17T22:57:39-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;Well, the &lt;em&gt;rest&lt;/em&gt; of the year, anyways. Better late than never, right?&lt;/p&gt;

&lt;p&gt;Inspired by &lt;a href="http://justinjackson.ca/2014-a-year-of-making-stuff/"&gt;Justin
Jackson&lt;/a&gt; and his &lt;a href="http://buildandlaunch.net/"&gt;Build
and Launch podcast&lt;/a&gt;, I have decided to commit to
launching at least 4 new projects this year. It&amp;rsquo;s not nearly the quickening
pace of Justin&amp;rsquo;s one product per week on his podcast, but I figure it&amp;rsquo;s a good
starting point.&lt;/p&gt;

&lt;p&gt;I already &lt;a href="/blog/soundingboard/"&gt;launched SoundingBoard&lt;/a&gt; a few days ago,
which is a blog, with the intention of culminating in an ebook as well. It&amp;rsquo;s a
bit of a different audience for me since it&amp;rsquo;s non-technical, but there is
definitely a real need for the information I am writing for it.&lt;/p&gt;

&lt;p&gt;My second product this year is close to launching, and is in beta with a few
friends and (hopefully) future customers right now. That is another blog post
for a little while later.&lt;/p&gt;

&lt;p&gt;As for the remaining 2 projects, who knows. We&amp;rsquo;ll see what happens. There&amp;rsquo;s a
ton of work ahead of me now.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SoundingBoard</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/soundingboard/"/>
    <id>http://www.vancelucas.com/blog/soundingboard/</id>
    <published>2015-04-14T15:40:00Z</published>
    <updated>2015-04-14T11:01:55-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;I just re-launched &lt;a href="http://soundingboard.tv"&gt;SoundingBoard&lt;/a&gt; as a new blog to
help non-technical people learn how to evaluate their app ideas.&lt;/p&gt;

&lt;p&gt;During my time running Brightbit (a web developemnt studio), I met with a lot of
people about their app ideas. Some were bad and crazy, but &lt;strong&gt;most of the ideas
I heard were good ideas that just lacked the critical thinking steps necessary
to determine basic viability or technical feasability&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;The Tip of the Iceberg&lt;/h2&gt;

&lt;p&gt;I view app ideas like an iceberg. When most people dream up an app idea, they
think only about the app itself, and fail to see the mountain of work beneath
the idea itself. The app idea won&amp;rsquo;t necessarily be a bad idea - it may even be
a downright good idea - but there are so many other considerations and
questions that have to be answered to get a complete picture of the kind of
work (time + money) involved in brining your app idea to life.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href="http://soundingboard.tv"&gt;SoundingBoard&lt;/a&gt; comes in. If you know
anyone that has a lot of app ideas, but doesn&amp;rsquo;t know who to talk to, the
SoundingBoard blog is for them.&lt;/p&gt;

&lt;h2&gt;Upcoming Book&lt;/h2&gt;

&lt;p&gt;In addition to the blog, &lt;a href="http://soundingboard.tv/2015/04/14/upcoming-book-get-real-with-your-app-idea/"&gt;I am also writing a
book&lt;/a&gt;.
Make sure to subscribe to the blog or fill out the form on the book landing
page if you want to be notified when it launches.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Working For The Man</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/working-for-the-man/"/>
    <id>http://www.vancelucas.com/blog/working-for-the-man/</id>
    <published>2015-03-05T17:19:00Z</published>
    <updated>2015-03-06T14:38:57-06:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;After almost exactly one year being &lt;a href="http://vancelucas.com/blog/funemployed/"&gt;fully on my
own&lt;/a&gt; after shutting down Brightbit, I
have decided to stop doing contract work, and accept a full-time position at
&lt;a href="http://www.netsuite.com"&gt;NetSuite&lt;/a&gt;. I debated a lot about either staying on my
own, or getting a full time job, and in the end, the job won out.&lt;/p&gt;

&lt;h3&gt;Why Go Back To Working For The Man?&lt;/h3&gt;

&lt;p&gt;In a nutshell: I needed a break from the responsibilities of running a company
to reset my focus and priorities. Working for myself was amazing, and it&amp;rsquo;s
something that I will probably go back to at some point in the future - just
not for a while, and it will be under different terms.&lt;/p&gt;

&lt;p&gt;Running, and subsequently shutting down &lt;a href="http://brightbit.com/"&gt;Brightbit&lt;/a&gt; was
the most stressful experience I have ever been through. Doing contract work on
my own after Brightbit was a breath of fresh air, and a &lt;em&gt;huge&lt;/em&gt; reduction in
stress, but I still found myself worrying about all the same things (sales
pipeline, invoicing, payments, performance, client communication, etc.), just on a
smaller scale (only myself this time).&lt;/p&gt;

&lt;h3&gt;Time Was Money&lt;/h3&gt;

&lt;p&gt;Perhaps the largest contributing factor to me choosing to quit contract work
was that I constantly found myself thinking (and valuing) my own time in terms
of money. I was resistant to taking time off, and it was always a
struggle in my mind, because I would always think of what the time off was
costing me in lost work. This mentality affected my family life and marriage,
and made me feel like I always needed to be working. If I &lt;em&gt;did&lt;/em&gt; take
time off, I needed to make it up sometime later - like on nights or on the
weekend. This also affected my own time as well - it was hard to justify
working on my own projects when there was always plenty of billable work to be
done.&lt;/p&gt;

&lt;p&gt;There are other ways to break this mentality besides quitting and taking a
&amp;ldquo;normal job&amp;rdquo; for a while, but taking a job is the fastest and most frictionless
ways to do it. I am still trading time for money, but the typical job
arrangement means that I can relax a bit and no longer obsess over billable
hours.&lt;/p&gt;

&lt;h3&gt;Benefits &amp;amp; Time Off&lt;/h3&gt;

&lt;p&gt;Ah, benefits. It&amp;rsquo;s nice to have them again. It&amp;rsquo;s also nice to not be paying
both sides of the social security and medicare tax again. But the largest benefit I
wanted? &lt;em&gt;Paid vacation&lt;/em&gt;. I can&amp;rsquo;t tell you how nice it was to just take a week
off inbetween quitting contract work and starting full time at NetSuite. It&amp;rsquo;s
also nice being able to plan a future vacation for the summer and look forward
to it without worry because I know I have plenty of paid time off.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Working with a team&lt;/em&gt; was another huge plus I that I was looking forward to.
Working on my own was fun, but sometimes it felt a bit isolating. It&amp;rsquo;s nice to
work with a good team again with lots of smart and talented people on it who
are all working together towards the same goal.&lt;/p&gt;

&lt;h3&gt;NetSuite&lt;/h3&gt;

&lt;p&gt;So that leaves the question: Why NetSuite? The product challenge is significant
and interesting, and involves a product area that I am most interested in:
Content Mangement Systems (CMS). It is also an opportunity to dive further into
JavaScript, as the role will have me at nearly 100% frontend JavaScript
development (the whole CMS frontend).&lt;/p&gt;

&lt;p&gt;Additionally, the pay and benefits are very good (mostly covered above), they
allow and support remote workers, and the working pace is relaxed and low
stress. It&amp;rsquo;s a good combination for employee happiness, and I hope to do some
good high-impact work during my time with them.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Modern PHP OpenX API Client</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/a-modern-php-openx-api-client/"/>
    <id>http://www.vancelucas.com/blog/a-modern-php-openx-api-client/</id>
    <published>2014-11-19T21:58:00Z</published>
    <updated>2014-11-19T16:47:39-06:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;I released a new &lt;a href="https://github.com/vlucas/openx-oauth-client"&gt;OpenX REST API
Client&lt;/a&gt; that works with the
newest OpenX v4 REST API. It uses &lt;a href="https://github.com/guzzle/guzzle/tree/4.2.3"&gt;Guzzle v4.x&lt;/a&gt; and the
&lt;a href="https://github.com/guzzle/oauth-subscriber"&gt;oauth-subscriber plugin&lt;/a&gt;. It is
&lt;a href="https://packagist.org/packages/vlucas/openx-oauth-client"&gt;available on Packagist&lt;/a&gt;,
uses the PSR-4 autoloader, and is properly namespaced. It took a bit of effort
to put together, so I hope you enjoy using it, and I hope it saves you a lot of
time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;What About the Official Client?&lt;/h2&gt;

&lt;p&gt;I didn&amp;rsquo;t really want to have to write a custom client library to use the OpenX
API, but the &lt;a href="https://github.com/openx/OX3-PHP-API-Client"&gt;official PHP
library&lt;/a&gt; was very outdated, both
in terms of code and composer autoload-friendliness. It has been updated to
work with v4 API, but the README and docs in the library itself don&amp;rsquo;t say that,
and only mention API v3. It has no namespaces, and can&amp;rsquo;t be autoloaded
just by using the class names.&lt;/p&gt;

&lt;p&gt;Beyond just code and style issues, the offical client is based on Zend
Framework 1 components, when ZF2 has been around for a few years now. I also
have a bias against ZF components, because they are not very de-coupled, and
have a tendency to &lt;a href="http://paul-m-jones.com/archives/4176"&gt;require nearly the rest of the entire
framework&lt;/a&gt; when using them. I don&amp;rsquo;t want
to include half of Zend Framework just to make a few API calls. Now, I don&amp;rsquo;t
have to!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fixing Homebrew on OSX 10.10 Yosemite</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/fixing-homebrew-on-osx-yosemite-10-10/"/>
    <id>http://www.vancelucas.com/blog/fixing-homebrew-on-osx-yosemite-10-10/</id>
    <published>2014-10-19T23:25:00Z</published>
    <updated>2014-10-19T18:47:44-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;If you upgraded to OSX 10.10 Yosemite, and now have a broken
&lt;a href="http://brew.sh/"&gt;homebrew&lt;/a&gt;, fear not
- the homebrew team has already fixed this!&lt;/p&gt;

&lt;p&gt;Luckily, the steps to fix it are fairly simple.&lt;/p&gt;

&lt;p&gt;First, update homebrew via &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight text"&gt;cd /usr/local/Library
git pull origin master
&lt;/pre&gt;
&lt;p&gt;Next, use homebrew to update and clean your installed packages:&lt;/p&gt;
&lt;pre class="highlight text"&gt;brew update
brew prune
brew doctor
&lt;/pre&gt;
&lt;p&gt;Now you should be all set!&lt;/p&gt;

&lt;p&gt;Footnote:&lt;/p&gt;

&lt;p&gt;I originally found (and &lt;a href="https://twitter.com/vlucas/status/523975518421397504"&gt;tweeted
 about&lt;/a&gt;) &lt;a href="http://jcvangent.com/fixing-homebrew-os-x-10-10-yosemite/"&gt;this
article&lt;/a&gt; when
searching for a fix, but ran into more issues after editing the &lt;code&gt;brew.rb&lt;/code&gt; file,
and eventually came to the solution of updating homebrew itself after seeing
that the homebrew team had fixed the issue themselves.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>An API is a Competitive Advantage</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/api-competitive-advantage/"/>
    <id>http://www.vancelucas.com/blog/api-competitive-advantage/</id>
    <published>2014-09-29T17:18:00Z</published>
    <updated>2014-09-29T22:37:13-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;In this increasingly inter-connected world, APIs are becoming more and more
important as time goes on. This is especially true if you have a business that
requires integration of some sort, like metrics, notifications, integrated
access to other systems (like telephony), payments, etc.&lt;/p&gt;

&lt;p&gt;Companies like &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;, &lt;a href="http://www.amazon.com"&gt;Amazon&lt;/a&gt;,
and &lt;a href="http://www.twilio.com"&gt;Twilio&lt;/a&gt; have embraced the API-first approach, and
in many ways embody and epitomize this movement as a whole.&lt;/p&gt;

&lt;h2&gt;Beyond Just Having An API&lt;/h2&gt;

&lt;p&gt;Just having an API is the obvious requirement for basic integrations. Going
further than that, however, is the thought that &lt;strong&gt;your API can actually be a
key point of differentiation from your competitors&lt;/strong&gt;. Using this strategy
(creating a robust, easy-to-use API) can be especially effective when you are
going up against entrenched competitors, or when you are trying to make
something that is traditionally very hard, easy.&lt;/p&gt;

&lt;h2&gt;Stripe And The Payments Industry&lt;/h2&gt;

&lt;p&gt;Ask any developer about online payment gateways, and they are likely to mention
&lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;. Why? Because it was clear from the start that
they really cared about devleopers, and put high priority in their API. Not
only just creating an API - &lt;em&gt;because every online payment system has an API&lt;/em&gt; -
but in creating a &lt;strong&gt;very good API&lt;/strong&gt; that is robust, simple, well-documented,
and easy to use.&lt;/p&gt;

&lt;p&gt;In contrast, many of Stripe&amp;rsquo;s competitors are using SOAP APIs or an emulation of the
Authorize.net API. The API documentation typically exists only in PDF form, and
it&amp;rsquo;s something that is mailed to you by the sales department. You&amp;rsquo;re lucky if
you can find it on the website. Sales first and developers second is pretty
much the exact opposite approach that Stripe took by focusing on developers and
integrations first.&lt;/p&gt;

&lt;p&gt;Here an &lt;a href="https://stripe.com/docs/api#create_charge"&gt;example from the Stripe
documentation&lt;/a&gt; - it&amp;rsquo;s just a simple
cURL call to charge a card, and returns a simple JSON response:&lt;/p&gt;
&lt;pre class="highlight text"&gt;curl https://api.stripe.com/v1/charges \
   -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \
   -d amount=400 \
   -d currency=usd \
   -d card=tok_14i9vP2eZvKYlo2Cdr4h0oHs \
   -d &amp;quot;description=Charge for test@example.com&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Stripe did several things right here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide a simple API with good documentation&lt;/li&gt;
&lt;li&gt;Provide a fast on-boarding process with no red tape (rare for credit card processors)&lt;/li&gt;
&lt;li&gt;Support subscription charges with no additional fees (also rare)&lt;/li&gt;
&lt;li&gt;Target and market to developers&lt;/li&gt;
&lt;li&gt;Good design and nice, clean merchant interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stripe&amp;rsquo;s success is a combination of the above reasons as well as many other
factors, but &lt;strong&gt;without a doubt their core product and main competitive
advantage is their API&lt;/strong&gt;. It shows in their overall developer experience, and
has played a large role in their success in stealing market share from
entrenched competitors like Authorize.net.&lt;/p&gt;

&lt;h2&gt;Amazon and the Public Cloud&lt;/h2&gt;

&lt;p&gt;For many, &lt;a href="http://www.amazon.com"&gt;Amazon&lt;/a&gt; is synonymous with cloud computing.
Many web hosts selling vitrualized servers came and went before Amazon got into
the game, but no one besides maybe &lt;a href="http://digitalocean.com"&gt;DigitalOcean&lt;/a&gt; has
had a similar level of success doing so.&lt;/p&gt;

&lt;p&gt;From the start of Amazon Web Services, &lt;strong&gt;Amazon made it clear that they were a
platform for developers to build on top of&lt;/strong&gt;, and provided an API from day one.
So while many other virtual hosting providers existed, Amazon EC2 was one of
the only ones that developers could use to provision whole new servers with
automated scripts and zero manual intervention. The availability of APIs to
provision servers lead to the creation of businesses built on top of Amazon&amp;rsquo;s
infrastructure, like &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; &amp;ndash; who probably wouldn&amp;rsquo;t
exist without Amazon&amp;rsquo;s APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.rackspace.com/"&gt;Rackspace&lt;/a&gt;, a much larger web host and significant
competitor, didn&amp;rsquo;t launch a public API until years after Amazon did, but it
&lt;a href="http://www.cloudscaling.com/blog/cloud-computing/openstack-aws/"&gt;was already too late, and they gave up significant market
share&lt;/a&gt; to
Amazon and Google Cloud Engine. &lt;strong&gt;Amazon&amp;rsquo;s API was its killer feature, and key
differentiator&lt;/strong&gt;. And we all &lt;a href="http://venturebeat.com/2014/04/24/amazon-web-services-is-doing-so-well-it-has-nowhere-else-to-grow/"&gt;know how well that has gone for
them&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Twilio And Telecommunications&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.twilio.com"&gt;Twilio&lt;/a&gt; is a good example of a company using APIs to
make something that is normally really difficult very easy. Now you don&amp;rsquo;t have
to worry about which cell phone network the number you are texting belongs to,
what country it is in, etc. Just integrate with the Twilio API, and you know
it&amp;rsquo;s going to work.&lt;/p&gt;

&lt;p&gt;For Twilio, &lt;strong&gt;their API is their entire business&lt;/strong&gt;. There is no Twilio without
an API, because if Twilio was just a web form that sent a text message to any
given number - even if it still smoothed over all the carrier and location
differences - it would not acheive the goal of automation, and thus would
defeat the purpose.&lt;/p&gt;

&lt;p&gt;In the years since Twilio launched, countless companies have relied on it for
things like &lt;a href="http://en.wikipedia.org/wiki/Multi-factor_authentication"&gt;2-factor
authentication&lt;/a&gt; and
phone number verification via SMS. Twilio can even power your entire phone
system through tools like &lt;a href="http://www.openvbx.org/"&gt;OpenVBX&lt;/a&gt;, all with a
collection of REST APIs.&lt;/p&gt;

&lt;h2&gt;The Bottom Line&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t have an open REST API that is easy to use, you will lose market
share to a competitor who does. It&amp;rsquo;s time to start taking your API very
seriously. An API is a competitive advantage.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hiding Variables From PHP's &lt;code&gt;var_dump()&lt;/code&gt;</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/hiding-variables-from-php-var_dump/"/>
    <id>http://www.vancelucas.com/blog/hiding-variables-from-php-var_dump/</id>
    <published>2014-08-07T21:09:00Z</published>
    <updated>2014-09-17T09:29:26-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This post is irrelevant for PHP 5.6+: &lt;a href="http://php.net/manual/en/language.oop5.magic.php#language.oop5.magic.debuginfo"&gt;a new
&lt;code&gt;__debugInfo()&lt;/code&gt; magic method&lt;/a&gt;
has made its way into PHP 5.6, so use that as the best solution to this issue.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;A common problem I have in PHP is that when I deal with larger objects with
multiple dependencies or circular references, &lt;code&gt;var_dump()&lt;/code&gt; becomes effectively
useless. Often times it spits out &lt;em&gt;huge&lt;/em&gt; numbers of objects that were set as a
dependency on the object I wanted to inspect that I didn&amp;rsquo;t even know were
there. Even worse, there are often circular references and other things that
get in the way. The signal-to-noise ratio is way off the charts.&lt;/p&gt;

&lt;h2&gt;Playing Hide-and-seek with &lt;code&gt;var_dump()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;So is there a way to effectively &amp;ldquo;hide&amp;rdquo; a variable from functions like
&lt;code&gt;var_dump&lt;/code&gt;, &lt;code&gt;print_r&lt;/code&gt;, and &lt;code&gt;var_export&lt;/code&gt;? Turns out, there is - but it does come
with some serious trade-offs.&lt;/p&gt;

&lt;p&gt;The first thing you need to know is that there is &lt;strong&gt;no way to hide an object
property&lt;/strong&gt;. Object properties will all be dumped, no matter the scope - public,
protected, or private.&lt;/p&gt;

&lt;p&gt;The trick &lt;em&gt;(or hack, if you will)&lt;/em&gt; relies on using a very handy but little-used
feature of PHP: static variables. No, not static class properties - static
&lt;em&gt;variables&lt;/em&gt;. You may have seen them, or even used them yourself a time or two:&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DatabaseConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Basically our &lt;code&gt;connection&lt;/code&gt; function acts as a kind of factory. The
&lt;code&gt;$connection&lt;/code&gt; variable here is cached between function calls so that the object
is only ever created once, and then simply returned on subsequent calls. The
&lt;code&gt;static&lt;/code&gt; declaration before our variable tells PHP that this variable will
maintain its value within the current execution scope, much like a static class
property maintains its value across multiple object creations.&lt;/p&gt;

&lt;h2&gt;That&amp;rsquo;s Great, But Now Your Dependecy Is Hard-Coded&lt;/h2&gt;

&lt;p&gt;The more experienced coders among you may have noticed that using this
approach, we can no longer use constructor dependency injecton. At least - not
&lt;em&gt;exactly&lt;/em&gt; like we used to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember when I said solving this problem comes with some serious trade-offs?
Okay, stay with me here. We can still use dependency injection.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main design trade-off you will have to make if you want to use this
approach is that you will have to create a single method that is both a getter
and setter for each object dependecy you want to inject. This is best
illustrated by example:&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DatabaseConnection&lt;/span&gt; &lt;span class="nv"&gt;$newConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$newConnection&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$newConnection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Okay, so now we have modified our function to be both a setter and a getter. We
can now use this function to set our dependecy upon object creation, and to get
the connection we need to use in place of the typical object property.&lt;/p&gt;

&lt;h2&gt;Using Dependency Injection In An Object&lt;/h2&gt;

&lt;p&gt;So now, &lt;strong&gt;instead of setting an object property&lt;/strong&gt; and using that object property
for our dependency like so:&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DoStuff&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DatabaseConnection&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;someQuery&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT ... blah blah blah&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;remove the object property and replace it with our new method&lt;/strong&gt;, and use
our &lt;code&gt;connection&lt;/code&gt; method as a setter in the constructor (while still using
dependecy injection), and then use our &lt;code&gt;connection&lt;/code&gt; method anywhere we need
it as a getter.&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DoStuff&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DatabaseConnection&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Setter
&lt;/span&gt;        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DatabaseConnection&lt;/span&gt; &lt;span class="nv"&gt;$newConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$newConnection&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$newConnection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;someQuery&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Getter
&lt;/span&gt;        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT ... blah blah blah&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And there we have it. We get the same functionality with a little bit more
code, except now our dependant object is &lt;strong&gt;completely hidden from &lt;code&gt;var_dump&lt;/code&gt;,
because it is not an object property&lt;/strong&gt;. It&amp;rsquo;s just a variable inside a method,
which no PHP inspector function will display.&lt;/p&gt;

&lt;h2&gt;Benefits To This Approach&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The dependency is completely hidden from &lt;code&gt;var_dump&lt;/code&gt;, &lt;code&gt;var_export&lt;/code&gt;
and &lt;code&gt;print_r&lt;/code&gt;.&lt;/strong&gt; This results in nice and clean debugging dumps without any
large dependency graphs or circular references.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your database and service credentials are safe&lt;/strong&gt;. Related to #1 - this is
such a huge benefit by itself that is has to have its own point. How many
times have you dumped the contents of an object only to see a database
connection dependency or API service dependency also dump out all your
connection information, usernames, passwords, and API keys? Hopefully this
never happens in production, but even in development, this is irritating.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Save time and hassle&lt;/strong&gt;. Sometimes dumping an object&amp;rsquo;s contents can be
unexpectedly &lt;em&gt;gigantic&lt;/em&gt;. In these cases, most of your time spent debugging
is scrolling through pages and pages of junk you don&amp;rsquo;t need to find the one
piece of information you&amp;rsquo;re actually looking for. This can be very
fristrating, especially if you&amp;rsquo;re in an edit-debug cycle where you are
repeating this multiple times in quick succession.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Drawbacks To This Approach&lt;/h2&gt;

&lt;p&gt;So&amp;hellip; trade-offs, right? Here are the main ones I have seen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;You have to use a combined getter/setter method&lt;/strong&gt;. This is because the static
variable&amp;rsquo;s scope only exists inside the method it is defined in. I
personally like single-word combined getter/setter methods, because they
simplify and reduce the surface area of your object&amp;rsquo;s API, so this may not
even be a drawback to you.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The object reference will now be static&lt;/strong&gt;. This is probably okay for most
objects you pass that are setup once and remain constant, like a
&lt;code&gt;DatabaseConnection&lt;/code&gt; object would be, but it won&amp;rsquo;t be okay for other
scenarios, like a collection of result objects or anything else that may
change for each new object instance you want to create.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Update: I previously said the object refence won&amp;rsquo;t change (mutate)
anymore once set with this method, but my tests on that were flawed.)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The code might be confusing&lt;/strong&gt;. Simplicity has a lot of value.  This
approach does add a little bit of complexity to the code, and may be a
little harder to understand and debug, especially for beginners. It&amp;rsquo;s likely
that people will see this code and say something like &lt;em&gt;&amp;ldquo;Why don&amp;rsquo;t you just
use an object property?&amp;rdquo;&lt;/em&gt;, because what it is doing is not immediately
obvious.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are using this approach and can think of any other benefits or
drawbacks, &lt;a href="https://twitter.com/vlucas"&gt;let me know&lt;/a&gt; and I will update this
post. Hiding variables from &lt;code&gt;var_dump&lt;/code&gt; and other similar functions is something
I really wish was built-in PHP.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE: I have &lt;a href="https://twitter.com/cowburn/status/497821547886022657"&gt;been
informed&lt;/a&gt; that &lt;a href="https://wiki.php.net/rfc/debug-info"&gt;a new
&lt;code&gt;__debugInfo()&lt;/code&gt; magic method&lt;/a&gt; has made its
way into PHP 5.6 - this is exactly what I was looking for, so now you just have to
upgrade when PHP 5.6 has a stable release :)&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Titanium Proxy Objects With JavaScript Call and Apply</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/titanium-proxy-objects-with-javascript-call-and-apply/"/>
    <id>http://www.vancelucas.com/blog/titanium-proxy-objects-with-javascript-call-and-apply/</id>
    <published>2014-07-03T03:52:00Z</published>
    <updated>2014-07-07T11:18:03-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;Sometimes language and platform abstractions bite you. They can seem pretty
straightforward and &amp;ldquo;just like the real thing&amp;rdquo;, but sometimes they have odd
behaviors that don&amp;rsquo;t quite work the way you expect.&lt;/p&gt;

&lt;h2&gt;Dynamic method invocation with .call() and .apply()&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt; functions are something you will use a lot if your
code involves a lot of dynamic arguments, such as building an array of
arguments that then need to be mapped to actual ordered function arguments in a
function or method call.&lt;/p&gt;

&lt;p&gt;Since Titanium runs native JavaScript with the V8 engine bundled in your app,
you will naturally find yourself attempting things like this:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But if you run that, and you will be presented with the head-scratching error:&lt;/p&gt;
&lt;pre class="highlight text"&gt;invalid method &amp;#39;execute:&amp;#39;
&lt;/pre&gt;
&lt;p&gt;Although the error is pretty confusing - you &lt;em&gt;know&lt;/em&gt; there is a method named
&lt;em&gt;execute&lt;/em&gt; on the &lt;code&gt;db&lt;/code&gt; object - there actually is a good explanation for this
behavior.&lt;/p&gt;

&lt;h2&gt;Titanium Proxy Objects&lt;/h2&gt;

&lt;p&gt;What intiutively seems to you like a normal JavaScript variable here - &lt;code&gt;db&lt;/code&gt; -
is actually a &lt;a href="http://www.appcelerator.com/blog/2012/02/what-is-a-titanium-proxy-object/"&gt;proxy
object&lt;/a&gt;
created and returned by Titanium with the &lt;code&gt;Ti.Database.open&lt;/code&gt; call. Titanium
also returns proxy objects for pretty much every other component that has a
native counterpart they are bridging over to behind the scenes. This black
magic is fundamental to how Titanium works internally.&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Although the main Titanium &lt;a href="http://www.appcelerator.com/blog/2012/02/what-is-a-titanium-proxy-object/"&gt;proxy
object
explanation&lt;/a&gt;
suggests creating a wrapper object for the method call, that&amp;rsquo;s actually not necessary
at all, and creates a lot of extra work, as well as many additional lines of code.&lt;/p&gt;

&lt;p&gt;The best solution is to use a bit of JavaScript meta programming and call the
&lt;code&gt;apply&lt;/code&gt; method directly from the &lt;code&gt;Function&lt;/code&gt; prototype:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is a nice one-liner that achieves the same end result, is much easier to
undertand, and does not require a wrapper object or another layer of
indirection to achieve.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>&lt;code&gt;module.exports&lt;/code&gt; All The Things!</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/module-exports-all-the-things/"/>
    <id>http://www.vancelucas.com/blog/module-exports-all-the-things/</id>
    <published>2014-06-05T04:38:00Z</published>
    <updated>2014-06-05T10:35:56-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;One thing I find myself doing a lot in javascript files for
&lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, or any other
&lt;a href="http://wiki.commonjs.org/wiki/CommonJS"&gt;CommonJS&lt;/a&gt;-based system is typing
&lt;code&gt;module.exports&lt;/code&gt; quite a lot, or creating these obnoxiously large and
repetitive &lt;code&gt;module.exports&lt;/code&gt; declarations at the bottom of my files.&lt;/p&gt;

&lt;p&gt;For example in a helper library for a
&lt;a href="http://www.appcelerator.com/titanium/"&gt;Titanium&lt;/a&gt; mobile project, I had the
following code snippet:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// ...
&lt;/span&gt;
&lt;span class="c1"&gt;// Platform detection helpers
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isiPhone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iphone&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isiPad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipad&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isiOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isiPhone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isiPad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ios&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isAndroid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;android&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// ... (lots of other functions) ...
&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;  &lt;span class="nl"&gt;isiOS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isiOS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;isiPhone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isiPhone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;isiPad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isiPad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;isAndroid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isAndroid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is a small sampling, but there were many, many other helpful functions in
that file. You can probably imagine the number or times I had to type out all
the variable names - &lt;em&gt;twice!&lt;/em&gt; That seems like such a waste of typing. The other
problem with this approach is that there is nothing visually signaling to me
what is going to be a part of the public API, and what is private and internal.
Everything is just a &lt;code&gt;var&lt;/code&gt;, and I have to recall what I want exposed when doing
the &lt;code&gt;module.exports&lt;/code&gt; call at the end.&lt;/p&gt;

&lt;p&gt;To avoid these issues, I could just prefix everything with &lt;code&gt;module.exports&lt;/code&gt;
directly, but that&amp;rsquo;s a lot of typing too - and doing that makes it cumbersome
to use a function in another place in the same module file.  Since there would
be no local variable assigned, I would have to type the full
&lt;code&gt;module.exports.functionName()&lt;/code&gt; every time to call another function within my
own module with this approach.&lt;/p&gt;

&lt;h2&gt;A Better Solution - Namespacing&lt;/h2&gt;

&lt;p&gt;The way I have come up with to solve this in my own code is to create a single
empty object literal at the top of the file named &lt;code&gt;ns&lt;/code&gt; (for &lt;em&gt;namespace&lt;/em&gt;). I
then create functions on the &lt;code&gt;ns&lt;/code&gt; object as I go, and export all the properties
on the &lt;code&gt;ns&lt;/code&gt; object at the end of the file.&lt;/p&gt;

&lt;p&gt;So in my original example, &lt;code&gt;var isiPhone = ...&lt;/code&gt; becomes &lt;code&gt;ns.isiPhone: ...&lt;/code&gt; -
shedding a few keystrokes &lt;em&gt;and&lt;/em&gt; gaining more clarity, because I know that
everything in the &lt;code&gt;ns&lt;/code&gt; object gets automatically exported at the end of the
file:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;// ...
&lt;/span&gt;
&lt;span class="c1"&gt;// Platform detection helpers
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiPhone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iphone&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiPad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipad&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiPhone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isiPad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ios&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAndroid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;android&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;osname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// ...
&lt;/span&gt;
&lt;span class="c1"&gt;// Export all the things! *\(&amp;#39;o&amp;#39;)|
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You could argue that any saved keystrokes are negated with the &lt;code&gt;module.exports&lt;/code&gt;
loop at the bottom, but the real benefit is the added clarity - I now know that
&lt;code&gt;var osname&lt;/code&gt; is just a temporary placeholder for data, and will never be in the
public API, and that all the functions following it will be. I don&amp;rsquo;t have to
scroll to the bottom or go anywhere else - I know this immediately by looking
at them, and re-using the public functions in &lt;code&gt;ns.isiOS&lt;/code&gt; isn&amp;rsquo;t painful. Besides,
I copy and paste the for loop anyways :).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; You may wonder &amp;ldquo;why not just assign &lt;code&gt;module.exports&lt;/code&gt; to &lt;code&gt;ns&lt;/code&gt;, like
this: &lt;code&gt;module.exports = ns;&lt;/code&gt;?&amp;rdquo; The reason is that using the &lt;code&gt;hasOwnProperty&lt;/code&gt;
method ensures that only properties you have explicitly added get exported. In
this case, it may not make a difference since we&amp;rsquo;re using a bare object
literal, but it&amp;rsquo;s good practice to use, so I do. Feel free to save a few lines
of code with the assignment if you feel differently!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Future Anticipated Questions</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/future-anticipated-questions/"/>
    <id>http://www.vancelucas.com/blog/future-anticipated-questions/</id>
    <published>2014-05-30T19:48:00Z</published>
    <updated>2014-05-31T21:42:19-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;I was recently part of a project where, upon asking for content for the
requried &amp;ldquo;Frequently Asked Questions&amp;rdquo; page, I was invited to a meeting with the
objective of &amp;ldquo;brainstorming content for the F.A.Q. page&amp;rdquo;. It was painfully
ironic. How can we possibly list frequently asked questions when we haven&amp;rsquo;t
even launched yet and &lt;em&gt;no one has asked any questions&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The meeting (video conference call) started, and I decided to stay silent for a
little while to see how the call would play out. The project stakeholders begun
by going over the F.A.Q. sections on a bunch of other websites, and compiling a
short list of all the questions they would need to write answers for. The list
included things like &lt;em&gt;&amp;ldquo;How can I contact you&amp;rdquo;&lt;/em&gt;, and &lt;em&gt;&amp;ldquo;How can I reset my
password&amp;rdquo;&lt;/em&gt; - &lt;strong&gt;questions that will likely never be asked unless your UI/UX is
terrible&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;All Filler, No Meat&lt;/h2&gt;

&lt;p&gt;Almost all of the questions on the list were things that anyone who has used a
website in the past 10 years should have some idea how to do. People naturally
look for &amp;ldquo;Contact&amp;rdquo; links in common navigation areas, and generally know they
can find a password reset link on a login form.  &lt;strong&gt;Simply by following common
conventions, all of the &amp;ldquo;F.A.Q.&amp;quot;s gleaned from other websites become completely
irrelevant&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Cart Before The Horse&lt;/h2&gt;

&lt;p&gt;Of course, all of the filler-quality content of the questions aside, the obvious
problem here is that &lt;strong&gt;by trying to anticipate future questions ahead of time, we
are going to get things wrong&lt;/strong&gt;. And, perhaps even more importantly - &lt;strong&gt;we are
creating unnecessary work for ourselves before launch, when our time is most
valuable&lt;/strong&gt;. Right before launch is exactly the time when you shouldn&amp;rsquo;t be
spending time on non-critical items.&lt;/p&gt;

&lt;h2&gt;Do You Really Need This Now?&lt;/h2&gt;

&lt;p&gt;This is a good question to asking about everything in general, but especially
when creating content pages for a website that you &amp;quot;need&amp;rdquo; before launch. During
my client meeting, after going over the initial list of F.A.Qs compiled during
the initial brainstorm, I interjected, and explained (nicely) everything that I
wrote above as an objection to creating the F.A.Q. page before launch. The
bottom line is that we were effectively changing the definition of &amp;ldquo;F.A.Q.&amp;rdquo;
from &lt;em&gt;Frequently Asked Questions&lt;/em&gt; to &lt;em&gt;Future Anticipated Questions&lt;/em&gt; by trying
to create content for it before we even had any real questions from visitors or
customers.&lt;/p&gt;

&lt;p&gt;Ultimately, we decided to put off the F.A.Q. section until after the website
launch and after we got some real customer questions. It seems obvious that it
should have been this way from the beginning, but it&amp;rsquo;s very easy for your
clients to get overwhelmed with things they think they need. It&amp;rsquo;s your job as a
professional to help them reason through everything and remove barriers to
launch to give them the best chance for success.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pulling My Apps From The App Store: Lessons Learned</title>
    <link rel="alternate" href="http://www.vancelucas.com/blog/pulling-my-apps-from-the-app-store/"/>
    <id>http://www.vancelucas.com/blog/pulling-my-apps-from-the-app-store/</id>
    <published>2014-05-01T02:31:00Z</published>
    <updated>2014-05-31T10:53:45-05:00</updated>
    <author>
      <name>Vance Lucas</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Pulling My Apps From The App Store" src="/images/posts/2014/appstore/itunesconnect-unpublished-apps.png" /&gt;&lt;/p&gt;

&lt;p&gt;Last night, I decided to pull my two iOS and Android apps &lt;a href="/blog/android-iphone-seo-app/"&gt;SEMTab SEO
Pro&lt;/a&gt; and my very first app, &lt;a href="/blog/zero-to-app-in-two-weeks-with-titanium/"&gt;AutoRidge
Lite&lt;/a&gt; from the App Store and
Google Play. It was a difficult decision to make, because they were my first
two apps, and I now have &lt;em&gt;no published mobile apps&lt;/em&gt; to show potential freelance
clients when they ask for app examples. This does limit my options, but now is
a great time to make this move since I just started a full-time long-term
contract and won&amp;rsquo;t be actively looking for extra work right now.&lt;/p&gt;

&lt;h2&gt;Showcasing Quality&lt;/h2&gt;

&lt;p&gt;With the &lt;a href="/blog/funemployed/"&gt;recent shutdown of my company&lt;/a&gt;, I feel like I&amp;rsquo;m
writing a new chapter in my life. Having any app in the app store just to say I
have one is no longer enough. The bar is higher now. &lt;strong&gt;I want a high-quality,
well-rated app that people genuinely like and want to use&lt;/strong&gt;. I want something I
can really be proud of. It doesn&amp;rsquo;t have to be complicated or difficult, or even
do anything fancy. It just has to look good, and do one thing well &amp;ndash; and &lt;em&gt;not
crash randomly&lt;/em&gt;. Difficult task, I know.&lt;/p&gt;

&lt;h2&gt;What A Bad App Looks Like&lt;/h2&gt;

&lt;p&gt;To provide an example of the kind of results a bad quality app will give you,
look no further than my own app - my only paid app - one I just pulled from the
stores - &lt;a href="http://semtab.com/"&gt;SEMTab SEO Pro&lt;/a&gt;. This app was ill-conceived and
hastily crafted. The UI wasn&amp;rsquo;t thought out very well, and neither was the
stability of the source data. The code I used to fetch Google&amp;rsquo;s PR ranking was
frequently wrong (I apparently used the wrong black magic incantation to summon
the accurate result), and link counts from Facebook and Twitter were
different than what were reported by other (more accurate) tools and by the
platforms themselves (turns out the API I used was way outdated).&lt;/p&gt;

&lt;h3&gt;Ratings&lt;/h3&gt;

&lt;p&gt;On Google Play, SEMTab had an abysmal rating of 1.6. This is primarily due to
the app crashing or just plain not working on a few Android devices that I
was not able to test on, or were not actually supported (like the &amp;ldquo;Rubbish&amp;rdquo;
review you see for it not working on the Galaxy Tab - one of the first Android
tablets that liked to pretend it could run normal Android apps just fine).&lt;/p&gt;

&lt;p&gt;&lt;img alt="Google Play Rating - An abysmal 1.6" src="/images/posts/2014/appstore/semtab-googleplay-ratings.png" /&gt;&lt;/p&gt;

&lt;p&gt;On the App Store, the app was a lot more stable, but still got a bad rating for
its terrible accuracy.&lt;/p&gt;

&lt;p&gt;&lt;img alt="App Store Rating - An not-much-beter 2 stars" src="/images/posts/2014/appstore/semtab-appstore-ratings.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Revenue&lt;/h3&gt;

&lt;p&gt;The app was $1.99, and was on sale for $0.99 for an extended period
of time to try and boost sales. Obviously, this strategy doesn&amp;rsquo;t work if your
app sucks and has a bunch of bad ratings.&lt;/p&gt;

&lt;p&gt;Google Play Revenue&lt;/p&gt;

&lt;p&gt;&lt;img alt="Google Play Revenue 2011-2014" src="/images/posts/2014/appstore/semtab-googleplay-revenue.png" /&gt;&lt;/p&gt;

&lt;p&gt;App Store Revenue&lt;/p&gt;

&lt;p&gt;&lt;img alt="iTunes Connect Stats 2011-2014" src="/images/posts/2014/appstore/itunesconnect-proceeds-2009-2014.png" /&gt;&lt;/p&gt;

&lt;p&gt;A whopping &lt;strong&gt;$127.19&lt;/strong&gt; from Google and &lt;strong&gt;$83.01&lt;/strong&gt; from Apple, for a grand total
of &lt;strong&gt;$210.20&lt;/strong&gt;. &lt;em&gt;In 4 years&lt;/em&gt;. Ouch. Totally not worth the (admittedly small)
effort I put into it.&lt;/p&gt;

&lt;h3&gt;Why I Pulled SEMTab SEO Pro&lt;/h3&gt;

&lt;p&gt;The reasons here are prety obvious, right? At this point, the ratings and
performance of this app are so bad that I don&amp;rsquo;t even &lt;em&gt;want&lt;/em&gt; it in my portfolio.
I didn&amp;rsquo;t even want people to know I made this app, and was a bit embarrased to
mention it whenever the &amp;ldquo;what apps have you made?&amp;rdquo; question came up, fearful
people would see the terrible rating read all the horrible reviews. Good
riddance. &lt;em&gt;(And if you&amp;rsquo;re wondering why I am publicly sharing all this now, it&amp;rsquo;s
for accountability - I never want to make an app this bad again.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;What a Mediocre App Looks Like&lt;/h2&gt;

&lt;p&gt;I am definitely &lt;em&gt;more proud&lt;/em&gt; (or, at least, not embarrased) by my first app -
&lt;a href="http://autoridge.com/mobile"&gt;Autoridge&lt;/a&gt;. I was a &lt;em&gt;lot&lt;/em&gt; more torn
about taking down Autoridge than I was about SEMTab. The reviews of Autoridge
basically boil down to this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The people who used the app and found relevant data for their vehicle&amp;rsquo;s
year/make/model &lt;strong&gt;loved it&lt;/strong&gt;. It provided huge value for them.&lt;/li&gt;
&lt;li&gt;The people who could not find their specific vehicle&amp;rsquo;s year/make/model, or
didn&amp;rsquo;t find any (or very few) relevant parts for their vehicle mostly
trashed it as incomplete, inaccurate or unreliable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Poor Early Titanium Android Support&lt;/h3&gt;

&lt;p&gt;And as in the case of SEMTab, there were also quite a few Android users that
the app didn&amp;rsquo;t work for at all (freezing or crashing). I mostly attribute this
to the very poor early &lt;a href="http://www.appcelerator.com/"&gt;Appcelerator Titanium&lt;/a&gt;
Android support. Both these apps were developed and released at least 3 years
ago on Titanium versions 1.5.x - 1.7.x, and a lot has changed for the better
since those dark ages with Titanium (we have have an MVC framework called
Alloy, and Titanium is at 3.2.x). From my experience with Alloy, I am positive
that updated versions of these apps would elimate all the problems on Android.&lt;/p&gt;

&lt;p&gt;That said, it&amp;rsquo;s pretty disharenting when you develop an Android app with an
intermediate platform like Titanium, test it locally with your own Android
device and emulator working perfectly, and then release it to a tsunami of
1-star reviews and reports of random freezes and crashes on various Android
devices that you can&amp;rsquo;t do anything to fix.&lt;/p&gt;

&lt;h3&gt;Ratings&lt;/h3&gt;

&lt;p&gt;On Google Play, Autoridge Lite had a &lt;strong&gt;very average rating of 3.1&lt;/strong&gt;. I am
actually suprised it was this high with the number of ratings reporting freezes
and crashes, but like I said, the number of people who it did work for
generally loved it. You can see this wide rating distribution reflected in the
data. This saddens me a bit, because the rating could have easily been 4+ in
Google Play if it worked consistently across all Android devices.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Google Play Rating - A very average 3.08" src="/images/posts/2014/appstore/autoridge-googleplay-ratings.png" /&gt;&lt;/p&gt;

&lt;p&gt;The App Store rating was pretty much the same story, with all the negative
reviews questioning data completeness and accuracy:&lt;/p&gt;

&lt;p&gt;&lt;img alt="App Store Rating - An not-much-beter 2 stars" src="/images/posts/2014/appstore/autoridge-appstore-ratings.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Distribution&lt;/h3&gt;

&lt;p&gt;The uptake of Autoridge Lite surprised me from the start. It definitely seems
like something people were ready to embrace if the data was more accurate,
complete, and up-to-date. I think overall, people really like the idea of using
an app instead of flipping through a greasy old parts book at the auto part
store.&lt;/p&gt;

&lt;p&gt;App Store Distribution Units&lt;/p&gt;

&lt;p&gt;&lt;img alt="App Store Units - 2009-2014" src="/images/posts/2014/appstore/itunesconnect-units-2009-2014.png" /&gt;&lt;/p&gt;

&lt;p&gt;Google Play Installs&lt;/p&gt;

&lt;p&gt;&lt;img alt="Google Play Distribution - 2010-2014" src="/images/posts/2014/appstore/autoridge-googleplay-units.png" /&gt;
&lt;img alt="Google Play Active Installs - 2010-2014" src="/images/posts/2014/appstore/autoridge-googleplay-activeinstalls.png" /&gt;&lt;/p&gt;

&lt;p&gt;According to Google, there are &lt;strong&gt;still 1,584 devices with Autoridge Lite
installed&lt;/strong&gt;. Definitely far better than SEMTab SEO Pro that had only
12 active installs. A lot of people still like this app.&lt;/p&gt;

&lt;h3&gt;Why I Pulled Autoridge Lite&lt;/h3&gt;

&lt;p&gt;The decision to pull Autoridge from the App Store and Google Play was much
harder than with SEMTab, but ultimately, it came down to an issue of time,
energy, and focus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Autoridge Lite has a &lt;a href="http://autoridge.com"&gt;webservice backend&lt;/a&gt; that I also
built and maintain, and this costs time and money.&lt;/li&gt;
&lt;li&gt;The vehicle data has a low degree of accuracy with no automatic error
correction, and would take a significant re-investment of time and energy to
correct. I would have to research new sources of auto part information and
build web scrapers/parsers for each of them, as well as implement better
processes for checking for updates and invalidating bad data.&lt;/li&gt;
&lt;li&gt;I want to completely re-code the app, and have wanted to for a while. So
doing this plus all the webservice updates too would probably take longer than
the original 2 weeks the entire project took initially. And since I can&amp;rsquo;t
update the app only without fixing the data accuracy issue, I have to
consider the whole picture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short - it would take too long to re-build the right way, and I don&amp;rsquo;t
currently see it as worth the effort considering I haven&amp;rsquo;t made any money from
it (and don&amp;rsquo;t see any path to make significant money from it ever as a one-man
show).&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Although this choice was tough, and arguably should have happened a long time
ago, I am happy to be doing it now. &lt;strong&gt;The first step towards finding something
that works is identifying and eliminating the stuff that doesn&amp;rsquo;t&lt;/strong&gt;. The worst
thing that can happen is to split your time, energy, and focus across so many
projects that you do them all badly. This is exactly what I feel I have done.
&lt;strong&gt;I want to be able to focus on my next project, I want it to be
high-quality, and I want it to have a clear revenue path&lt;/strong&gt;. This whole &amp;ldquo;making
money with software&amp;rdquo; path is not an easy one, so I want to give myself the best
chance possible by concentrating on the next big thing, and making a better
product than I&amp;rsquo;ve ever made before. That&amp;rsquo;s what this move is all about.&lt;/p&gt;
</content>
  </entry>
</feed>
